#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const package_json_1 = __importDefault(require("../package.json"));
const actions_js_1 = require("./actions.js");
const program = new commander_1.Command();
const { name, version, description } = package_json_1.default;
program.name(name).description(description).version(version);
program.command('ls').description('List all the registries').action(actions_js_1.onList);
program
    .command('current')
    .option('-u, --show-url', 'Show the registry URL instead of the name')
    .description('Show current registry name or URL')
    .action(actions_js_1.onCurrent);
program
    .command('use [name]')
    .description('Change current registry')
    .action(actions_js_1.onUse);
program
    .command('add <name> <url> [home]')
    .description('Add custom registry')
    .action(actions_js_1.onAdd);
program
    .command('login <name> [base64]')
    .option('-a, --always-auth', 'Set is always auth')
    .option('-u, --username <username>', 'Your user name for this registry')
    .option('-p, --password <password>', 'Your password for this registry')
    .option('-e, --email <email>', 'Your email for this registry')
    .description('Set authorize information for a custom registry with a base64 encoded string or username and password')
    .action(actions_js_1.onLogin);
program
    .command('set-hosted-repo <name> <repo>')
    .description('Set hosted npm repository for a custom registry to publish package')
    .action(actions_js_1.onSetRepository);
program
    .command('set-scope <scopeName> <url>')
    .description('Associating a scope with a registry')
    .action(actions_js_1.onSetScope);
program
    .command('del-scope <scopeName>')
    .description('Remove a scope')
    .action(actions_js_1.onDeleteScope);
program
    .command('set <name>')
    .requiredOption('-a,--attr <attr>', 'Set a custom registry attribute')
    .requiredOption('-v,--value <value>', 'Set a custom registry value')
    .description('Set a custom registry attribute')
    .action(actions_js_1.onSetAttribute);
program
    .command('rename <name> <newName>')
    .description('Change custom registry name')
    .action(actions_js_1.onRename);
program
    .command('del [name]')
    .description('Delete custom registry')
    .action(actions_js_1.onDelete);
program
    .command('home <name> [browser]')
    .description('Open the homepage of registry with optional browser')
    .action(actions_js_1.onHome);
program
    .command('test [registry]')
    .description('Show response time for specific or all registries')
    .action(() => {
    (0, actions_js_1.onTest)();
}); // ignore return value to pass typescript check
program.parse(process.argv);
if (process.argv.length === 2) {
    program.outputHelp();
}
